
Toogle 3 led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000547  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000220  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.GPIO_init 0000000a  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Led_seq 00000032  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000016  0000009e  0000009e  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000b4  000000b4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.GPIO_init:

000000ca <GPIO_init>:
			 PORTD &= ~(1<<4);
		}
}
void GPIO_init(void){
	/*make led and buzzer output pins*/
	DDRD|= (1<<5) | (1<<6) | (1<<7) | (1<<4);
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	80 6f       	ori	r24, 0xF0	; 240
  ce:	81 bb       	out	0x11, r24	; 17
	PORTD =0;
  d0:	12 ba       	out	0x12, r1	; 18
  d2:	08 95       	ret

Disassembly of section .text.Led_seq:

0000006c <Led_seq>:
}
void Led_seq(void){
	int i;
	for(i=5 ; i<8 ; i++){
  6c:	25 e0       	ldi	r18, 0x05	; 5
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	12 c0       	rjmp	.+36     	; 0x96 <Led_seq+0x2a>
		
		PORTD |= (1<<i);
  72:	42 b3       	in	r20, 0x12	; 18
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <Led_seq+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <Led_seq+0x10>
  84:	94 2f       	mov	r25, r20
  86:	98 2b       	or	r25, r24
  88:	92 bb       	out	0x12, r25	; 18
		waiting();
		PORTD &=~ (1<<i);
  8a:	92 b3       	in	r25, 0x12	; 18
  8c:	80 95       	com	r24
  8e:	89 23       	and	r24, r25
  90:	82 bb       	out	0x12, r24	; 18
	DDRD|= (1<<5) | (1<<6) | (1<<7) | (1<<4);
	PORTD =0;
}
void Led_seq(void){
	int i;
	for(i=5 ; i<8 ; i++){
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 30       	cpi	r18, 0x08	; 8
  98:	31 05       	cpc	r19, r1
  9a:	5c f3       	brlt	.-42     	; 0x72 <Led_seq+0x6>
		PORTD |= (1<<i);
		waiting();
		PORTD &=~ (1<<i);
	}
	
}
  9c:	08 95       	ret

Disassembly of section .text.main:

0000009e <main>:
void GPIO_init(void);
void Led_seq(void);
void waiting(void);
int main(void)
{	
	GPIO_init();
  9e:	0e 94 65 00 	call	0xca	; 0xca <GPIO_init>
	while(1)
		{
			 Led_seq();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
			 /*Buzzer ON*/
			 PORTD |= (1<<4);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	82 bb       	out	0x12, r24	; 18
			 waiting();
			 PORTD &= ~(1<<4);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000dc <_fini>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000de <__funcs_on_exit>:
  de:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e0 <__simulator_exit>:
  e0:	08 95       	ret

Disassembly of section .text.exit:

000000b4 <exit>:
  b4:	ec 01       	movw	r28, r24
  b6:	0e 94 6f 00 	call	0xde	; 0xde <__funcs_on_exit>
  ba:	0e 94 6e 00 	call	0xdc	; 0xdc <_fini>
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 70 00 	call	0xe0	; 0xe0 <__simulator_exit>
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Exit>

Disassembly of section .text._Exit:

000000d8 <_Exit>:
  d8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
