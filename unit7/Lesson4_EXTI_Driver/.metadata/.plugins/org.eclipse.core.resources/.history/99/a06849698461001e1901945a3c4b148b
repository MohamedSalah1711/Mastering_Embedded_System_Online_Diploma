/* Learn-In-Depth
 * File name :Stm32f103C6_Driver_gpio.c
 *  Description: source file for EXTI DRIVER stm32f103xx
 * Created By: mohamed salah fathy
 */

#include "Stm32F103C6_EXTI_Driver.h"
//-----------------------------
//Generic Variables (Call back)
//-----------------------------

void (*GP_CallBack [15])(void);

/**================================================================
 * @Fn			-Get_CR_shif
 * @brief 		-get the shift number for cr reg
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
uint8 Get_AFIO_EXTICR_Port_value(GPIO_Typedef* GPIOx){
	uint8 Val=0;
	if(GPIOx==GPIOA){
		Val=0;
	}else if(GPIOx==GPIOB){
		Val=1;
	}else if(GPIOx==GPIOC){
		Val=2;
	}else if(GPIOx==GPIOD){
		Val=3;
	}
	return Val;
}
/**================================================================
 * @Fn			-Get_CR_shif
 * @brief 		-get the shift number for cr reg
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
void MCAL_EXTI_GPIO_Init(EXTI_Pin_Config_t* EXTI_Config){
	//	1-Configure The pin as alternative input floating
	GPIO_PIN_Config PinConfig={EXTI_Config->EXTI_Pin.Pin_Number,Max_speed_10MHZ,Floating_Mode};
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_PORT,&PinConfig);
	//  2-Configure AFIO_EXTICR[index] Register
	uint8 AFIO_EXTICR_index = (EXTI_Config->EXTI_Pin.Line_Number/4);
	uint8 AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.Line_Number%4)*4;
	//Clear the corresponding Four bits
	AFIO->AFIO_EXTICR[AFIO_EXTICR_index] &=~(0xF<<AFIO_EXTICR_position);
	AFIO->AFIO_EXTICR[AFIO_EXTICR_index] |=(Get_AFIO_EXTICR_Port_value(EXTI_Config->EXTI_Pin.GPIO_PORT)<<AFIO_EXTICR_position);
	// 3-To generate the interrupt, the interrupt line should be configured and enabled. This is done
	//by programming the two trigger registers with the desired edge detection
	if(EXTI_Config->trigger==Falling){
		EXTI->EXTI_FTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);

	}else if (EXTI_Config->trigger==Rising){
		EXTI->EXTI_RTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
	}else{	//Both Rising and falling
		EXTI->EXTI_FTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
		EXTI->EXTI_RTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
	}

	// 4-Set Call back Function
	GP_CallBack[EXTI_Config->EXTI_Pin.Line_Number] = EXTI_Config->P_CallBack;

	// 5-enabling the interrupt request by writing a ‘1’ to
	//	 the corresponding bit in the interrupt mask register.
	if(EXTI_Config->IRQ_EN==Interrupt_Enable){
		EXTI->EXTI_EMR |= (1<<EXTI_Config->EXTI_Pin.Line_Number);
	}else{
		EXTI->EXTI_EMR &= ~(1<<EXTI_Config->EXTI_Pin.Line_Number);
	}

}
/**================================================================
 * @Fn			-Get_CR_shif
 * @brief 		-get the shift number for cr reg
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
void MCAL_EXTI_GPIO_Deinit(){
	EXTI->EXTI_IMR = EXTI_IMR_Reset;
	EXTI->EXTI_EMR = EXTI_EMR_Reset ;
	EXTI->EXTI_RTSR = EXTI_RTSR_Reset;
	EXTI->EXTI_FTSR = EXTI_FTSR_Reset ;
	EXTI->EXTI_SWIER = EXTI_SWIER_Reset;
	EXTI->EXTI_PR = EXTI_PR_Reset ;
	//disable nvic interrupt by write one to clear
	EXTI0_NVIC_DISABLE();
	EXTI1_NVIC_DISABLE();
	EXTI2_NVIC_DISABLE();
	EXTI3_NVIC_DISABLE();
	EXTI4_NVIC_DISABLE();
	EXTI9_5_NVIC_DISABLE();
	EXTI15_10_NVIC_DISABLE();
}




void EXTI0_IRQHandler(){


}
void EXTI1_IRQHandler(){


}
void EXTI2_IRQHandler(){


}
void EXTI3_IRQHandler(){


}
void EXTI4_IRQHandler(){


}
void EXTI9_5_IRQHandler(){


}
void EXTI15_10_IRQHandler(){


}

