
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e4c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000f7c  08000f7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa4  08000fa4  00010fac  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa4  08000fa4  00010fac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa4  08000fac  00010fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa4  08000fa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000fac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000fac  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001086  00000000  00000000  00010fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000050c  00000000  00000000  0001205b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c8  00000000  00000000  00012567  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00012f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000130c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000075d  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000088a  00000000  00000000  00013975  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000053c8  00000000  00000000  000141ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000195c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000518  00000000  00000000  00019644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f64 	.word	0x08000f64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f64 	.word	0x08000f64

08000170 <wait_ms>:
 *
 * Created: 9/22/2023 4:43:39 PM
 *  Author: mohamed salah
 */ 
#include "Lcd.h"
void wait_ms(uint32 time){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32 i,j;
	for(i=0 ; i<time ; i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>

		for(j = 0; j<255; j++){
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i=0 ; i<time ; i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>

		}
	}


}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_init>:
void LCD_init(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	uint8 count;
	GPIO_PIN_Config Pin_Config;
	wait_ms(40);
 80001ae:	2028      	movs	r0, #40	; 0x28
 80001b0:	f7ff ffde 	bl	8000170 <wait_ms>
	//make the data port output GP PUSH_PULL
	for(count = First_Data_PIN ; count <= Last_Data_PIN ;count++ ){
 80001b4:	2304      	movs	r3, #4
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	e00d      	b.n	80001d6 <LCD_init+0x2e>
		Pin_Config.Mode = OUTPUT_PP;
 80001ba:	2304      	movs	r3, #4
 80001bc:	71bb      	strb	r3, [r7, #6]
		Pin_Config.Pin_Num = count;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	713b      	strb	r3, [r7, #4]
		Pin_Config.speed = Max_speed_10MHZ;
 80001c2:	2301      	movs	r3, #1
 80001c4:	717b      	strb	r3, [r7, #5]
		MCAL_GPIO_Init(LCD_DATA_PORT,&Pin_Config);
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4820      	ldr	r0, [pc, #128]	; (800024c <LCD_init+0xa4>)
 80001cc:	f000 fa32 	bl	8000634 <MCAL_GPIO_Init>
	for(count = First_Data_PIN ; count <= Last_Data_PIN ;count++ ){
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	3301      	adds	r3, #1
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b07      	cmp	r3, #7
 80001da:	d9ee      	bls.n	80001ba <LCD_init+0x12>
	}
	//make the control port output GP PUSH_PULL
	for(count = First_Control_PIN ; count <= Last_Control_PIN ;count++ ){
 80001dc:	2308      	movs	r3, #8
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	e00d      	b.n	80001fe <LCD_init+0x56>
		Pin_Config.Mode = OUTPUT_PP;
 80001e2:	2304      	movs	r3, #4
 80001e4:	71bb      	strb	r3, [r7, #6]
		Pin_Config.Pin_Num = count;
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	713b      	strb	r3, [r7, #4]
		Pin_Config.speed = Max_speed_10MHZ;
 80001ea:	2301      	movs	r3, #1
 80001ec:	717b      	strb	r3, [r7, #5]
		MCAL_GPIO_Init(LCD_CONTROL_PORT,&Pin_Config);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4816      	ldr	r0, [pc, #88]	; (800024c <LCD_init+0xa4>)
 80001f4:	f000 fa1e 	bl	8000634 <MCAL_GPIO_Init>
	for(count = First_Control_PIN ; count <= Last_Control_PIN ;count++ ){
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	3301      	adds	r3, #1
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b0a      	cmp	r3, #10
 8000202:	d9ee      	bls.n	80001e2 <LCD_init+0x3a>
	}

	//write zero to control pins
	for(count = First_Control_PIN ; count <= Last_Control_PIN ;count++ ){
 8000204:	2308      	movs	r3, #8
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	e008      	b.n	800021c <LCD_init+0x74>

		MCAL_GPIO_WritePin(LCD_CONTROL_PORT,count,PIN_LOW);
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	480e      	ldr	r0, [pc, #56]	; (800024c <LCD_init+0xa4>)
 8000212:	f000 fb07 	bl	8000824 <MCAL_GPIO_WritePin>
	for(count = First_Control_PIN ; count <= Last_Control_PIN ;count++ ){
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	3301      	adds	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	2b0a      	cmp	r3, #10
 8000220:	d9f3      	bls.n	800020a <LCD_init+0x62>
	}
	wait_ms(20);
 8000222:	2014      	movs	r0, #20
 8000224:	f7ff ffa4 	bl	8000170 <wait_ms>

#ifdef FOUR_BIT_MODE
	LCD_send_command(0x32);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 f811 	bl	8000250 <LCD_send_command>
	LCD_send_command(LCD_FUNCTION_4BIT_2LINES);	
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f000 f80e 	bl	8000250 <LCD_send_command>

#endif

	LCD_send_command(LCD_DISP_ON_CURSOR_BLINK);
 8000234:	200f      	movs	r0, #15
 8000236:	f000 f80b 	bl	8000250 <LCD_send_command>
	LCD_clear_screen();
 800023a:	f000 f8a3 	bl	8000384 <LCD_clear_screen>
	LCD_send_command(LCD_ENTRY_MODE);
 800023e:	2006      	movs	r0, #6
 8000240:	f000 f806 	bl	8000250 <LCD_send_command>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010800 	.word	0x40010800

08000250 <LCD_send_command>:
void LCD_send_command(uint8 command){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
 800025a:	2200      	movs	r2, #0
 800025c:	2109      	movs	r1, #9
 800025e:	4848      	ldr	r0, [pc, #288]	; (8000380 <LCD_send_command+0x130>)
 8000260:	f000 fae0 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000264:	2002      	movs	r0, #2
 8000266:	f7ff ff83 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
 800026a:	2200      	movs	r2, #0
 800026c:	2108      	movs	r1, #8
 800026e:	4844      	ldr	r0, [pc, #272]	; (8000380 <LCD_send_command+0x130>)
 8000270:	f000 fad8 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000274:	2002      	movs	r0, #2
 8000276:	f7ff ff7b 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN,Get_command_bit(command,4));
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2104      	movs	r1, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f978 	bl	8000574 <Get_command_bit>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	2104      	movs	r1, #4
 800028a:	483d      	ldr	r0, [pc, #244]	; (8000380 <LCD_send_command+0x130>)
 800028c:	f000 faca 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+1,Get_command_bit(command,5));
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	2105      	movs	r1, #5
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f96d 	bl	8000574 <Get_command_bit>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	2105      	movs	r1, #5
 80002a0:	4837      	ldr	r0, [pc, #220]	; (8000380 <LCD_send_command+0x130>)
 80002a2:	f000 fabf 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+2,Get_command_bit(command,6));
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2106      	movs	r1, #6
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f962 	bl	8000574 <Get_command_bit>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	2106      	movs	r1, #6
 80002b6:	4832      	ldr	r0, [pc, #200]	; (8000380 <LCD_send_command+0x130>)
 80002b8:	f000 fab4 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+3,Get_command_bit(command,7));
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2107      	movs	r1, #7
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f957 	bl	8000574 <Get_command_bit>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	2107      	movs	r1, #7
 80002cc:	482c      	ldr	r0, [pc, #176]	; (8000380 <LCD_send_command+0x130>)
 80002ce:	f000 faa9 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80002d2:	2002      	movs	r0, #2
 80002d4:	f7ff ff4c 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_HIGH);
 80002d8:	2201      	movs	r2, #1
 80002da:	210a      	movs	r1, #10
 80002dc:	4828      	ldr	r0, [pc, #160]	; (8000380 <LCD_send_command+0x130>)
 80002de:	f000 faa1 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80002e2:	2002      	movs	r0, #2
 80002e4:	f7ff ff44 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_LOW);
 80002e8:	2200      	movs	r2, #0
 80002ea:	210a      	movs	r1, #10
 80002ec:	4824      	ldr	r0, [pc, #144]	; (8000380 <LCD_send_command+0x130>)
 80002ee:	f000 fa99 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80002f2:	2002      	movs	r0, #2
 80002f4:	f7ff ff3c 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN,Get_command_bit(command,0));
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f939 	bl	8000574 <Get_command_bit>
 8000302:	4603      	mov	r3, r0
 8000304:	461a      	mov	r2, r3
 8000306:	2104      	movs	r1, #4
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <LCD_send_command+0x130>)
 800030a:	f000 fa8b 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+1,Get_command_bit(command,1));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2101      	movs	r1, #1
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f92e 	bl	8000574 <Get_command_bit>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	2105      	movs	r1, #5
 800031e:	4818      	ldr	r0, [pc, #96]	; (8000380 <LCD_send_command+0x130>)
 8000320:	f000 fa80 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+2,Get_command_bit(command,2));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2102      	movs	r1, #2
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f923 	bl	8000574 <Get_command_bit>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	2106      	movs	r1, #6
 8000334:	4812      	ldr	r0, [pc, #72]	; (8000380 <LCD_send_command+0x130>)
 8000336:	f000 fa75 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+3,Get_command_bit(command,3));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2103      	movs	r1, #3
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f918 	bl	8000574 <Get_command_bit>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	2107      	movs	r1, #7
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <LCD_send_command+0x130>)
 800034c:	f000 fa6a 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000350:	2002      	movs	r0, #2
 8000352:	f7ff ff0d 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_HIGH);
 8000356:	2201      	movs	r2, #1
 8000358:	210a      	movs	r1, #10
 800035a:	4809      	ldr	r0, [pc, #36]	; (8000380 <LCD_send_command+0x130>)
 800035c:	f000 fa62 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000360:	2002      	movs	r0, #2
 8000362:	f7ff ff05 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_LOW);
 8000366:	2200      	movs	r2, #0
 8000368:	210a      	movs	r1, #10
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <LCD_send_command+0x130>)
 800036c:	f000 fa5a 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000370:	2001      	movs	r0, #1
 8000372:	f7ff fefd 	bl	8000170 <wait_ms>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010800 	.word	0x40010800

08000384 <LCD_clear_screen>:
void LCD_clear_screen(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	LCD_send_command(LCD_CLEAR);
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff ff61 	bl	8000250 <LCD_send_command>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <LCD_Send_a_charachter>:
void LCD_Send_a_charachter(const uint8 character){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
#ifdef FOUR_BIT_MODE
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
 800039e:	2200      	movs	r2, #0
 80003a0:	2109      	movs	r1, #9
 80003a2:	4848      	ldr	r0, [pc, #288]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80003a4:	f000 fa3e 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f7ff fee1 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2108      	movs	r1, #8
 80003b2:	4844      	ldr	r0, [pc, #272]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80003b4:	f000 fa36 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80003b8:	2002      	movs	r0, #2
 80003ba:	f7ff fed9 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN,(Get_command_bit(character,4)));
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2104      	movs	r1, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f8d6 	bl	8000574 <Get_command_bit>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	2104      	movs	r1, #4
 80003ce:	483d      	ldr	r0, [pc, #244]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80003d0:	f000 fa28 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+1,Get_command_bit(character,5));
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2105      	movs	r1, #5
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f8cb 	bl	8000574 <Get_command_bit>
 80003de:	4603      	mov	r3, r0
 80003e0:	461a      	mov	r2, r3
 80003e2:	2105      	movs	r1, #5
 80003e4:	4837      	ldr	r0, [pc, #220]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80003e6:	f000 fa1d 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+2,Get_command_bit(character,6));
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2106      	movs	r1, #6
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f8c0 	bl	8000574 <Get_command_bit>
 80003f4:	4603      	mov	r3, r0
 80003f6:	461a      	mov	r2, r3
 80003f8:	2106      	movs	r1, #6
 80003fa:	4832      	ldr	r0, [pc, #200]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80003fc:	f000 fa12 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+3,Get_command_bit(character,7));
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2107      	movs	r1, #7
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f8b5 	bl	8000574 <Get_command_bit>
 800040a:	4603      	mov	r3, r0
 800040c:	461a      	mov	r2, r3
 800040e:	2107      	movs	r1, #7
 8000410:	482c      	ldr	r0, [pc, #176]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 8000412:	f000 fa07 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000416:	2002      	movs	r0, #2
 8000418:	f7ff feaa 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_HIGH);
 800041c:	2201      	movs	r2, #1
 800041e:	210a      	movs	r1, #10
 8000420:	4828      	ldr	r0, [pc, #160]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 8000422:	f000 f9ff 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000426:	2002      	movs	r0, #2
 8000428:	f7ff fea2 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_LOW);
 800042c:	2200      	movs	r2, #0
 800042e:	210a      	movs	r1, #10
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 8000432:	f000 f9f7 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f7ff fe9a 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN,Get_command_bit(character,0));
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f897 	bl	8000574 <Get_command_bit>
 8000446:	4603      	mov	r3, r0
 8000448:	461a      	mov	r2, r3
 800044a:	2104      	movs	r1, #4
 800044c:	481d      	ldr	r0, [pc, #116]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 800044e:	f000 f9e9 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+1,Get_command_bit(character,1));
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f88c 	bl	8000574 <Get_command_bit>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	2105      	movs	r1, #5
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 8000464:	f000 f9de 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+2,Get_command_bit(character,2));
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2102      	movs	r1, #2
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f881 	bl	8000574 <Get_command_bit>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	2106      	movs	r1, #6
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 800047a:	f000 f9d3 	bl	8000824 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,First_Data_PIN+3,Get_command_bit(character,3));
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2103      	movs	r1, #3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f876 	bl	8000574 <Get_command_bit>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
 800048c:	2107      	movs	r1, #7
 800048e:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 8000490:	f000 f9c8 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 8000494:	2002      	movs	r0, #2
 8000496:	f7ff fe6b 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_HIGH);
 800049a:	2201      	movs	r2, #1
 800049c:	210a      	movs	r1, #10
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80004a0:	f000 f9c0 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(2);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f7ff fe63 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT,EN_PIN,PIN_LOW);
 80004aa:	2200      	movs	r2, #0
 80004ac:	210a      	movs	r1, #10
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <LCD_Send_a_charachter+0x130>)
 80004b0:	f000 f9b8 	bl	8000824 <MCAL_GPIO_WritePin>
	wait_ms(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff fe5b 	bl	8000170 <wait_ms>
#endif

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40010800 	.word	0x40010800

080004c8 <LCD_Send_String>:
void LCD_Send_String(const uint8  *string){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint8 i=0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
	while(string[i] != '\0'){
 80004d4:	e01f      	b.n	8000516 <LCD_Send_String+0x4e>
		LCD_Send_a_charachter(string[i]);
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff58 	bl	8000394 <LCD_Send_a_charachter>
		i++;	
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	3301      	adds	r3, #1
 80004e8:	73fb      	strb	r3, [r7, #15]
		if(i == 16){
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	2b10      	cmp	r3, #16
 80004ee:	d104      	bne.n	80004fa <LCD_Send_String+0x32>
			LCD_MOVE_CURSOR_XY (1 , 0);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2001      	movs	r0, #1
 80004f4:	f000 f819 	bl	800052a <LCD_MOVE_CURSOR_XY>
 80004f8:	e00d      	b.n	8000516 <LCD_Send_String+0x4e>

		}else if ( i== 32 || i== 33){
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	2b20      	cmp	r3, #32
 80004fe:	d002      	beq.n	8000506 <LCD_Send_String+0x3e>
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	2b21      	cmp	r3, #33	; 0x21
 8000504:	d107      	bne.n	8000516 <LCD_Send_String+0x4e>
			LCD_clear_screen();
 8000506:	f7ff ff3d 	bl	8000384 <LCD_clear_screen>
			LCD_MOVE_CURSOR_XY(0,0);
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f80c 	bl	800052a <LCD_MOVE_CURSOR_XY>
			i=0;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
	while(string[i] != '\0'){
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4413      	add	r3, r2
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1d9      	bne.n	80004d6 <LCD_Send_String+0xe>
		}

	}


}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <LCD_MOVE_CURSOR_XY>:
void LCD_MOVE_CURSOR_XY(uint8 line , uint8 pos){
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	460a      	mov	r2, r1
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	4613      	mov	r3, r2
 8000538:	71bb      	strb	r3, [r7, #6]
	if(line==0){
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d109      	bne.n	8000554 <LCD_MOVE_CURSOR_XY+0x2a>
		if(pos < 16 && pos >= 0){
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d812      	bhi.n	800056c <LCD_MOVE_CURSOR_XY+0x42>
			LCD_send_command(LCD_BEGIN_AT_FIRST_ROW + pos);
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	3b80      	subs	r3, #128	; 0x80
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe7f 	bl	8000250 <LCD_send_command>
		}

	}


}
 8000552:	e00b      	b.n	800056c <LCD_MOVE_CURSOR_XY+0x42>
	}else if (line == 1 ){
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d108      	bne.n	800056c <LCD_MOVE_CURSOR_XY+0x42>
		if(pos < 16 && pos >= 0){
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d805      	bhi.n	800056c <LCD_MOVE_CURSOR_XY+0x42>
			LCD_send_command(LCD_BEGIN_AT_SECOND_ROW + pos);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	3b40      	subs	r3, #64	; 0x40
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe72 	bl	8000250 <LCD_send_command>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <Get_command_bit>:
uint8 Get_command_bit(uint8 command,uint8 bit_num){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]

	return (((command)>>(bit_num))&(1U));
 8000584:	79fa      	ldrb	r2, [r7, #7]
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	fa42 f303 	asr.w	r3, r2, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3

}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <Get_CR_shif>:
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
uint8 Get_CR_shif(uint8 Pin_Num){
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	uint8 Shift_value;
	switch(Pin_Num){
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d83b      	bhi.n	8000628 <Get_CR_shif+0x88>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <Get_CR_shif+0x18>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005f9 	.word	0x080005f9
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	08000623 	.word	0x08000623
 80005d8:	080005f9 	.word	0x080005f9
 80005dc:	080005ff 	.word	0x080005ff
 80005e0:	08000605 	.word	0x08000605
 80005e4:	0800060b 	.word	0x0800060b
 80005e8:	08000611 	.word	0x08000611
 80005ec:	08000617 	.word	0x08000617
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000623 	.word	0x08000623
	case 8:
	case 0:
		Shift_value=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
		break;
 80005fc:	e014      	b.n	8000628 <Get_CR_shif+0x88>
	case 9:
	case 1:
		Shift_value=4;
 80005fe:	2304      	movs	r3, #4
 8000600:	73fb      	strb	r3, [r7, #15]
		break;
 8000602:	e011      	b.n	8000628 <Get_CR_shif+0x88>
	case 10:
	case 2:
		Shift_value=8;
 8000604:	2308      	movs	r3, #8
 8000606:	73fb      	strb	r3, [r7, #15]
		break;
 8000608:	e00e      	b.n	8000628 <Get_CR_shif+0x88>

	case 11:
	case 3:
		Shift_value=12;
 800060a:	230c      	movs	r3, #12
 800060c:	73fb      	strb	r3, [r7, #15]
		break;
 800060e:	e00b      	b.n	8000628 <Get_CR_shif+0x88>
	case 12:
	case 4:
		Shift_value=16;
 8000610:	2310      	movs	r3, #16
 8000612:	73fb      	strb	r3, [r7, #15]
		break;
 8000614:	e008      	b.n	8000628 <Get_CR_shif+0x88>
	case 13:
	case 5:
		Shift_value=20;
 8000616:	2314      	movs	r3, #20
 8000618:	73fb      	strb	r3, [r7, #15]
		break;
 800061a:	e005      	b.n	8000628 <Get_CR_shif+0x88>
	case 14:
	case 6:
		Shift_value=24;
 800061c:	2318      	movs	r3, #24
 800061e:	73fb      	strb	r3, [r7, #15]
		break;
 8000620:	e002      	b.n	8000628 <Get_CR_shif+0x88>
	case 15:
	case 7:
		Shift_value=28;
 8000622:	231c      	movs	r3, #28
 8000624:	73fb      	strb	r3, [r7, #15]
		break;
 8000626:	bf00      	nop
	}
	return Shift_value;
 8000628:	7bfb      	ldrb	r3, [r7, #15]

}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <MCAL_GPIO_Init>:
 * @brief 		-Init port and config pin
 * @param[in]	- GPIO_Typedef pointer to port ,number of pin
 * @retval-		- None
 * Note-
 */
void MCAL_GPIO_Init(GPIO_Typedef* GPIOx,GPIO_PIN_Config* Pin_Config){
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	//Config register to hold adress of CR
	vuint32 *Config_Reg=NULL;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	if(((Pin_Config->Pin_Num)<PIN_8) && ((Pin_Config->Pin_Num)>=PIN_0)){
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b07      	cmp	r3, #7
 8000648:	d802      	bhi.n	8000650 <MCAL_GPIO_Init+0x1c>
		Config_Reg = &(GPIOx->CRL);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e002      	b.n	8000656 <MCAL_GPIO_Init+0x22>
	}else{
		Config_Reg = &(GPIOx->CRH);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3304      	adds	r3, #4
 8000654:	60fb      	str	r3, [r7, #12]
	}
	/*make the Mode and CNF zeros*/
	*Config_Reg &= ~ (0XF <<Get_CR_shif(Pin_Config->Pin_Num));
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffa0 	bl	80005a0 <Get_CR_shif>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	230f      	movs	r3, #15
 8000666:	4093      	lsls	r3, r2
 8000668:	43da      	mvns	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	401a      	ands	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	601a      	str	r2, [r3, #0]
	switch(Pin_Config->Mode){
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b07      	cmp	r3, #7
 800067a:	f200 80ce 	bhi.w	800081a <MCAL_GPIO_Init+0x1e6>
 800067e:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <MCAL_GPIO_Init+0x50>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	080006a5 	.word	0x080006a5
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006c3 	.word	0x080006c3
 8000690:	080006f5 	.word	0x080006f5
 8000694:	08000729 	.word	0x08000729
 8000698:	08000761 	.word	0x08000761
 800069c:	0800079f 	.word	0x0800079f
 80006a0:	080007dd 	.word	0x080007dd
	case Analog_input_Mode:
	case Floating_Mode:
		*Config_Reg |= (Floating_Mode<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff79 	bl	80005a0 <Get_CR_shif>
 80006ae:	4603      	mov	r3, r0
 80006b0:	3302      	adds	r3, #2
 80006b2:	2201      	movs	r2, #1
 80006b4:	409a      	lsls	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]
		break;
 80006c0:	e0ab      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case Input_PU:
		*Config_Reg |= (Input_PU<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff6a 	bl	80005a0 <Get_CR_shif>
 80006cc:	4603      	mov	r3, r0
 80006ce:	3302      	adds	r3, #2
 80006d0:	2202      	movs	r2, #2
 80006d2:	409a      	lsls	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	601a      	str	r2, [r3, #0]
		GPIOx ->ODR |= (1<<Pin_Config->Pin_Num);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	4611      	mov	r1, r2
 80006e8:	2201      	movs	r2, #1
 80006ea:	408a      	lsls	r2, r1
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60da      	str	r2, [r3, #12]
		break;
 80006f2:	e092      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case Input_PD:
		*Config_Reg |= ((Input_PD-1)<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff51 	bl	80005a0 <Get_CR_shif>
 80006fe:	4603      	mov	r3, r0
 8000700:	3302      	adds	r3, #2
 8000702:	2202      	movs	r2, #2
 8000704:	409a      	lsls	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	601a      	str	r2, [r3, #0]
		GPIOx ->ODR &= ~(1<<Pin_Config->Pin_Num);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	43d2      	mvns	r2, r2
 8000720:	401a      	ands	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]
		break;
 8000726:	e078      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case OUTPUT_PP:
		*Config_Reg |= ((OUTPUT_PP-OUTPUT_MODE_E)<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff37 	bl	80005a0 <Get_CR_shif>
 8000732:	2200      	movs	r2, #0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	601a      	str	r2, [r3, #0]
		*Config_Reg |= ((Pin_Config->speed)<<(Get_CR_shif(Pin_Config->Pin_Num)));
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	461c      	mov	r4, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff29 	bl	80005a0 <Get_CR_shif>
 800074e:	4603      	mov	r3, r0
 8000750:	fa04 f203 	lsl.w	r2, r4, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	601a      	str	r2, [r3, #0]
		break;
 800075e:	e05c      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case OUTPUT_OD:
		*Config_Reg |= ((OUTPUT_OD-OUTPUT_MODE_E)<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff1b 	bl	80005a0 <Get_CR_shif>
 800076a:	4603      	mov	r3, r0
 800076c:	3302      	adds	r3, #2
 800076e:	2201      	movs	r2, #1
 8000770:	409a      	lsls	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	601a      	str	r2, [r3, #0]
		*Config_Reg |= ((Pin_Config->speed)<<(Get_CR_shif(Pin_Config->Pin_Num)));
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	461c      	mov	r4, r3
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff0a 	bl	80005a0 <Get_CR_shif>
 800078c:	4603      	mov	r3, r0
 800078e:	fa04 f203 	lsl.w	r2, r4, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	431a      	orrs	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e03d      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case ALT_OUTPUT_PP:
		*Config_Reg |= ((ALT_OUTPUT_PP-OUTPUT_MODE_E)<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fefc 	bl	80005a0 <Get_CR_shif>
 80007a8:	4603      	mov	r3, r0
 80007aa:	3302      	adds	r3, #2
 80007ac:	2202      	movs	r2, #2
 80007ae:	409a      	lsls	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	601a      	str	r2, [r3, #0]
		*Config_Reg |= ((Pin_Config->speed)<<(Get_CR_shif(Pin_Config->Pin_Num)));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	461c      	mov	r4, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff feeb 	bl	80005a0 <Get_CR_shif>
 80007ca:	4603      	mov	r3, r0
 80007cc:	fa04 f203 	lsl.w	r2, r4, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	601a      	str	r2, [r3, #0]
		break;
 80007da:	e01e      	b.n	800081a <MCAL_GPIO_Init+0x1e6>
	case ALT_OUTPUT_OD:
		*Config_Reg |= ((ALT_OUTPUT_OD-OUTPUT_MODE_E)<<(Get_CR_shif(Pin_Config->Pin_Num)+CNF_SHIFT));
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fedd 	bl	80005a0 <Get_CR_shif>
 80007e6:	4603      	mov	r3, r0
 80007e8:	3302      	adds	r3, #2
 80007ea:	2203      	movs	r2, #3
 80007ec:	409a      	lsls	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	601a      	str	r2, [r3, #0]
		*Config_Reg |= ((Pin_Config->speed)<<(Get_CR_shif(Pin_Config->Pin_Num)));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	461c      	mov	r4, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fecc 	bl	80005a0 <Get_CR_shif>
 8000808:	4603      	mov	r3, r0
 800080a:	fa04 f203 	lsl.w	r2, r4, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	431a      	orrs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
		break;
 8000818:	bf00      	nop


	}
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop

08000824 <MCAL_GPIO_WritePin>:
 * @param[in]	- GPIO_Typedef pointer to port,pin number,value
 * @retval-		- none
 * Note-
 */

void MCAL_GPIO_WritePin(GPIO_Typedef* GPIOx,uint8 Pin_Num,uint8 value){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
 8000830:	4613      	mov	r3, r2
 8000832:	70bb      	strb	r3, [r7, #2]

	if(GPIOx != NULL){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d019      	beq.n	800086e <MCAL_GPIO_WritePin+0x4a>
		if(value == PIN_HIGH ){
 800083a:	78bb      	ldrb	r3, [r7, #2]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d109      	bne.n	8000854 <MCAL_GPIO_WritePin+0x30>
			/*Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
			These bits are write-only and can be accessed in Word mode only.
			0: No action on the corresponding ODRx bit
			1: Set the corresponding ODRx bit*/
			GPIOx->ODR |= (PIN_HIGH<<Pin_Num);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]

			GPIOx->ODR &= ~(1<<Pin_Num);
		}
	}

}
 8000852:	e00c      	b.n	800086e <MCAL_GPIO_WritePin+0x4a>
		}else if(value == PIN_LOW){
 8000854:	78bb      	ldrb	r3, [r7, #2]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d109      	bne.n	800086e <MCAL_GPIO_WritePin+0x4a>
			GPIOx->ODR &= ~(1<<Pin_Num);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	78fa      	ldrb	r2, [r7, #3]
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	43d2      	mvns	r2, r2
 8000868:	401a      	ands	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60da      	str	r2, [r3, #12]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <Disable_NVIC>:
void (*GP_CallBack [15])(void);




void  Disable_NVIC(uint8 Input_Line){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	switch(Input_Line){
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d854      	bhi.n	8000932 <Disable_NVIC+0xba>
 8000888:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <Disable_NVIC+0x18>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008d1 	.word	0x080008d1
 8000894:	080008df 	.word	0x080008df
 8000898:	080008ed 	.word	0x080008ed
 800089c:	080008fb 	.word	0x080008fb
 80008a0:	08000909 	.word	0x08000909
 80008a4:	08000917 	.word	0x08000917
 80008a8:	08000917 	.word	0x08000917
 80008ac:	08000917 	.word	0x08000917
 80008b0:	08000917 	.word	0x08000917
 80008b4:	08000917 	.word	0x08000917
 80008b8:	08000925 	.word	0x08000925
 80008bc:	08000925 	.word	0x08000925
 80008c0:	08000925 	.word	0x08000925
 80008c4:	08000925 	.word	0x08000925
 80008c8:	08000925 	.word	0x08000925
 80008cc:	08000925 	.word	0x08000925
	case EXTI_0:
		EXTI0_NVIC_DISABLE();
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <Disable_NVIC+0xc4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <Disable_NVIC+0xc4>)
 80008d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008da:	6013      	str	r3, [r2, #0]
		break;
 80008dc:	e029      	b.n	8000932 <Disable_NVIC+0xba>
	case EXTI_1:
		EXTI1_NVIC_DISABLE();
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <Disable_NVIC+0xc4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <Disable_NVIC+0xc4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6013      	str	r3, [r2, #0]
		break;
 80008ea:	e022      	b.n	8000932 <Disable_NVIC+0xba>

	case EXTI_2:
		EXTI2_NVIC_DISABLE();
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <Disable_NVIC+0xc4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <Disable_NVIC+0xc4>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f6:	6013      	str	r3, [r2, #0]
		break;
 80008f8:	e01b      	b.n	8000932 <Disable_NVIC+0xba>

	case EXTI_3 :
		EXTI3_NVIC_DISABLE();
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <Disable_NVIC+0xc4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <Disable_NVIC+0xc4>)
 8000900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000904:	6013      	str	r3, [r2, #0]
		break;
 8000906:	e014      	b.n	8000932 <Disable_NVIC+0xba>

	case EXTI_4:
		EXTI4_NVIC_DISABLE();
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <Disable_NVIC+0xc4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <Disable_NVIC+0xc4>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
		break;
 8000914:	e00d      	b.n	8000932 <Disable_NVIC+0xba>
	case EXTI_5:
	case EXTI_6:
	case EXTI_7:
	case EXTI_8:
	case EXTI_9:
		EXTI9_5_NVIC_DISABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <Disable_NVIC+0xc4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <Disable_NVIC+0xc4>)
 800091c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000920:	6013      	str	r3, [r2, #0]
		break;
 8000922:	e006      	b.n	8000932 <Disable_NVIC+0xba>
	case EXTI_11:
	case EXTI_12:
	case EXTI_13:
	case EXTI_14:
	case EXTI_15:
		EXTI15_10_NVIC_DISABLE();
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <Disable_NVIC+0xc8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a05      	ldr	r2, [pc, #20]	; (8000940 <Disable_NVIC+0xc8>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
		break;
 8000930:	bf00      	nop

	}

}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	e000e180 	.word	0xe000e180
 8000940:	e000e184 	.word	0xe000e184

08000944 <Enable_NVIC>:

void  Enable_NVIC(uint8 Input_Line){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	switch(Input_Line){
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d854      	bhi.n	80009fe <Enable_NVIC+0xba>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <Enable_NVIC+0x18>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	0800099d 	.word	0x0800099d
 8000960:	080009ab 	.word	0x080009ab
 8000964:	080009b9 	.word	0x080009b9
 8000968:	080009c7 	.word	0x080009c7
 800096c:	080009d5 	.word	0x080009d5
 8000970:	080009e3 	.word	0x080009e3
 8000974:	080009e3 	.word	0x080009e3
 8000978:	080009e3 	.word	0x080009e3
 800097c:	080009e3 	.word	0x080009e3
 8000980:	080009e3 	.word	0x080009e3
 8000984:	080009f1 	.word	0x080009f1
 8000988:	080009f1 	.word	0x080009f1
 800098c:	080009f1 	.word	0x080009f1
 8000990:	080009f1 	.word	0x080009f1
 8000994:	080009f1 	.word	0x080009f1
 8000998:	080009f1 	.word	0x080009f1
	case EXTI_0:
		EXTI0_NVIC_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <Enable_NVIC+0xc4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <Enable_NVIC+0xc4>)
 80009a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a6:	6013      	str	r3, [r2, #0]
		break;
 80009a8:	e029      	b.n	80009fe <Enable_NVIC+0xba>
	case EXTI_1:
		EXTI1_NVIC_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <Enable_NVIC+0xc4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <Enable_NVIC+0xc4>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6013      	str	r3, [r2, #0]
		break;
 80009b6:	e022      	b.n	80009fe <Enable_NVIC+0xba>

	case EXTI_2:
		EXTI2_NVIC_ENABLE();
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <Enable_NVIC+0xc4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <Enable_NVIC+0xc4>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
		break;
 80009c4:	e01b      	b.n	80009fe <Enable_NVIC+0xba>

	case EXTI_3 :
		EXTI3_NVIC_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <Enable_NVIC+0xc4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <Enable_NVIC+0xc4>)
 80009cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d0:	6013      	str	r3, [r2, #0]
		break;
 80009d2:	e014      	b.n	80009fe <Enable_NVIC+0xba>

	case EXTI_4:
		EXTI4_NVIC_ENABLE();
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <Enable_NVIC+0xc4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <Enable_NVIC+0xc4>)
 80009da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009de:	6013      	str	r3, [r2, #0]
		break;
 80009e0:	e00d      	b.n	80009fe <Enable_NVIC+0xba>
	case EXTI_5:
	case EXTI_6:
	case EXTI_7:
	case EXTI_8:
	case EXTI_9:
		EXTI9_5_NVIC_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <Enable_NVIC+0xc4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <Enable_NVIC+0xc4>)
 80009e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009ec:	6013      	str	r3, [r2, #0]
		break;
 80009ee:	e006      	b.n	80009fe <Enable_NVIC+0xba>
	case EXTI_11:
	case EXTI_12:
	case EXTI_13:
	case EXTI_14:
	case EXTI_15:
		EXTI15_10_NVIC_ENABLE();
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <Enable_NVIC+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <Enable_NVIC+0xc8>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fa:	6013      	str	r3, [r2, #0]
		break;
 80009fc:	bf00      	nop

	}



}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000e104 	.word	0xe000e104

08000a10 <Get_AFIO_EXTICR_Port_value>:
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
uint8 Get_AFIO_EXTICR_Port_value(GPIO_Typedef* GPIOx){
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	uint8 Val=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
	if(GPIOx==GPIOA){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <Get_AFIO_EXTICR_Port_value+0x50>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d102      	bne.n	8000a2a <Get_AFIO_EXTICR_Port_value+0x1a>
		Val=0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e013      	b.n	8000a52 <Get_AFIO_EXTICR_Port_value+0x42>
	}else if(GPIOx==GPIOB){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <Get_AFIO_EXTICR_Port_value+0x54>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d102      	bne.n	8000a38 <Get_AFIO_EXTICR_Port_value+0x28>
		Val=1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e00c      	b.n	8000a52 <Get_AFIO_EXTICR_Port_value+0x42>
	}else if(GPIOx==GPIOC){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <Get_AFIO_EXTICR_Port_value+0x58>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d102      	bne.n	8000a46 <Get_AFIO_EXTICR_Port_value+0x36>
		Val=2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e005      	b.n	8000a52 <Get_AFIO_EXTICR_Port_value+0x42>
	}else if(GPIOx==GPIOD){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <Get_AFIO_EXTICR_Port_value+0x5c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <Get_AFIO_EXTICR_Port_value+0x42>
		Val=3;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	73fb      	strb	r3, [r7, #15]
	}
	return Val;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40011400 	.word	0x40011400

08000a70 <MCAL_EXTI_GPIO_Init>:
 * @param[in]	- Pin number
 * @param[out]	- uint8 value for shifted position
 * @retval-		- None
 * Note-
 */
void MCAL_EXTI_GPIO_Init(EXTI_Pin_Config_t* EXTI_Config){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f915 	bl	8000ca8 <Update_EXTI>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <EXTI0_IRQHandler>:
}




void EXTI0_IRQHandler(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
		1: selected trigger request occurred
		This bit is set when the selected edge event arrives on the external interrupt line. This bit is
		cleared by writing a ‘1’ into the bit.
		Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI->EXTI_PR |=(1<<EXTI_0);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <EXTI0_IRQHandler+0x1c>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <EXTI0_IRQHandler+0x1c>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6153      	str	r3, [r2, #20]
	GP_CallBack[EXTI_0]();
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <EXTI0_IRQHandler+0x20>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4798      	blx	r3
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010400 	.word	0x40010400
 8000aa8:	20000020 	.word	0x20000020

08000aac <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI->EXTI_PR |=(1<<EXTI_1);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <EXTI1_IRQHandler+0x1c>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <EXTI1_IRQHandler+0x1c>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	6153      	str	r3, [r2, #20]
	GP_CallBack[EXTI_1]();
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <EXTI1_IRQHandler+0x20>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4798      	blx	r3
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010400 	.word	0x40010400
 8000acc:	20000020 	.word	0x20000020

08000ad0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI->EXTI_PR |=(1<<EXTI_2);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <EXTI2_IRQHandler+0x1c>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <EXTI2_IRQHandler+0x1c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6153      	str	r3, [r2, #20]
	GP_CallBack[EXTI_2]();
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <EXTI2_IRQHandler+0x20>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4798      	blx	r3
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010400 	.word	0x40010400
 8000af0:	20000020 	.word	0x20000020

08000af4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI->EXTI_PR |=(1<<EXTI_3);
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <EXTI3_IRQHandler+0x1c>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <EXTI3_IRQHandler+0x1c>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6153      	str	r3, [r2, #20]
	GP_CallBack[EXTI_3]();
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <EXTI3_IRQHandler+0x20>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4798      	blx	r3
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010400 	.word	0x40010400
 8000b14:	20000020 	.word	0x20000020

08000b18 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI->EXTI_PR |=(1<<EXTI_4);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <EXTI4_IRQHandler+0x1c>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <EXTI4_IRQHandler+0x1c>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6153      	str	r3, [r2, #20]

	GP_CallBack[EXTI_4]();
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI4_IRQHandler+0x20>)
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	4798      	blx	r3
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010400 	.word	0x40010400
 8000b38:	20000020 	.word	0x20000020

08000b3c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	if(EXTI->EXTI_PR & (1<<EXTI_5)){
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d008      	beq.n	8000b5e <EXTI9_5_IRQHandler+0x22>
		EXTI->EXTI_PR |=(1<<EXTI_5);
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	f043 0320 	orr.w	r3, r3, #32
 8000b56:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_5]();
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <EXTI9_5_IRQHandler+0xa4>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_6)){
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <EXTI9_5_IRQHandler+0x40>
		EXTI->EXTI_PR |=(1<<EXTI_6);
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_6]();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <EXTI9_5_IRQHandler+0xa4>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_7)){
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <EXTI9_5_IRQHandler+0x5e>
		EXTI->EXTI_PR |=(1<<EXTI_7);
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b92:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_7]();
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <EXTI9_5_IRQHandler+0xa4>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_8)){
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d008      	beq.n	8000bb8 <EXTI9_5_IRQHandler+0x7c>
		EXTI->EXTI_PR |=(1<<EXTI_8);
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_8]();
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <EXTI9_5_IRQHandler+0xa4>)
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_9)){
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d008      	beq.n	8000bd6 <EXTI9_5_IRQHandler+0x9a>
		EXTI->EXTI_PR |=(1<<EXTI_9);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <EXTI9_5_IRQHandler+0xa0>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_9]();
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <EXTI9_5_IRQHandler+0xa4>)
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	4798      	blx	r3
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010400 	.word	0x40010400
 8000be0:	20000020 	.word	0x20000020

08000be4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
			1: selected trigger request occurred
			This bit is set when the selected edge event arrives on the external interrupt line. This bit is
			cleared by writing a ‘1’ into the bit.
			Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	if(EXTI->EXTI_PR & (1<<EXTI_10)){
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d008      	beq.n	8000c06 <EXTI15_10_IRQHandler+0x22>
		EXTI->EXTI_PR |=(1<<EXTI_10);
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_10]();
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_11)){
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d008      	beq.n	8000c24 <EXTI15_10_IRQHandler+0x40>
		EXTI->EXTI_PR |=(1<<EXTI_11);
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c1c:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_11]();
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_12)){
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <EXTI15_10_IRQHandler+0x5e>
		EXTI->EXTI_PR |=(1<<EXTI_12);
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3a:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_12]();
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_13)){
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <EXTI15_10_IRQHandler+0x7c>
		EXTI->EXTI_PR |=(1<<EXTI_13);
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c58:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_13]();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_14)){
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <EXTI15_10_IRQHandler+0x9a>
		EXTI->EXTI_PR |=(1<<EXTI_14);
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_14]();
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7c:	4798      	blx	r3
	}if(EXTI->EXTI_PR & (1<<EXTI_15)){
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d008      	beq.n	8000c9c <EXTI15_10_IRQHandler+0xb8>
		EXTI->EXTI_PR |=(1<<EXTI_15);
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <EXTI15_10_IRQHandler+0xbc>)
 8000c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c94:	6153      	str	r3, [r2, #20]
		GP_CallBack[EXTI_15]();
 8000c96:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <EXTI15_10_IRQHandler+0xc0>)
 8000c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9a:	4798      	blx	r3
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010400 	.word	0x40010400
 8000ca4:	20000020 	.word	0x20000020

08000ca8 <Update_EXTI>:
void Update_EXTI(EXTI_Pin_Config_t* EXTI_Config){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//	1-Configure The pin as alternative input floating
	GPIO_PIN_Config PinConfig={EXTI_Config->EXTI_Pin.Pin_Number,Max_speed_10MHZ,Floating_Mode};
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7a1b      	ldrb	r3, [r3, #8]
 8000cb4:	723b      	strb	r3, [r7, #8]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	727b      	strb	r3, [r7, #9]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_PORT,&PinConfig);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f107 0208 	add.w	r2, r7, #8
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fcb3 	bl	8000634 <MCAL_GPIO_Init>
	//  2-Configure AFIO_EXTICR[index] Register
	uint8 AFIO_EXTICR_index = (EXTI_Config->EXTI_Pin.Line_Number/4);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	73fb      	strb	r3, [r7, #15]
	uint8 AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.Line_Number%4)*4;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	73bb      	strb	r3, [r7, #14]
	//Clear the corresponding Four bits
	AFIO->AFIO_EXTICR[AFIO_EXTICR_index] &=~(0xF<<AFIO_EXTICR_position);
 8000ce4:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <Update_EXTI+0x164>)
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	4944      	ldr	r1, [pc, #272]	; (8000e0c <Update_EXTI+0x164>)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4002      	ands	r2, r0
 8000d00:	3302      	adds	r3, #2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->AFIO_EXTICR[AFIO_EXTICR_index] |=(Get_AFIO_EXTICR_Port_value(EXTI_Config->EXTI_Pin.GPIO_PORT)<<AFIO_EXTICR_position);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe80 	bl	8000a10 <Get_AFIO_EXTICR_Port_value>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	fa02 f103 	lsl.w	r1, r2, r3
 8000d1a:	4a3c      	ldr	r2, [pc, #240]	; (8000e0c <Update_EXTI+0x164>)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d24:	4608      	mov	r0, r1
 8000d26:	4939      	ldr	r1, [pc, #228]	; (8000e0c <Update_EXTI+0x164>)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// 3-To generate the interrupt, the interrupt line should be configured and Enabled. This is done
	//by programming the two trigger registers with the desired edge detection
	if(EXTI_Config->trigger==Falling){
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b1b      	ldrb	r3, [r3, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10b      	bne.n	8000d52 <Update_EXTI+0xaa>
		EXTI->EXTI_FTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <Update_EXTI+0x168>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	4611      	mov	r1, r2
 8000d44:	2201      	movs	r2, #1
 8000d46:	408a      	lsls	r2, r1
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <Update_EXTI+0x168>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	60d3      	str	r3, [r2, #12]
 8000d50:	e025      	b.n	8000d9e <Update_EXTI+0xf6>

	}else if (EXTI_Config->trigger==Rising){
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7b1b      	ldrb	r3, [r3, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d10b      	bne.n	8000d72 <Update_EXTI+0xca>
		EXTI->EXTI_RTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <Update_EXTI+0x168>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	4611      	mov	r1, r2
 8000d64:	2201      	movs	r2, #1
 8000d66:	408a      	lsls	r2, r1
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <Update_EXTI+0x168>)
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6093      	str	r3, [r2, #8]
 8000d70:	e015      	b.n	8000d9e <Update_EXTI+0xf6>
	}else{	//Both Rising and falling
		EXTI->EXTI_FTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <Update_EXTI+0x168>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	408a      	lsls	r2, r1
 8000d80:	4611      	mov	r1, r2
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <Update_EXTI+0x168>)
 8000d84:	430b      	orrs	r3, r1
 8000d86:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_RTSR|= (1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <Update_EXTI+0x168>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	4611      	mov	r1, r2
 8000d92:	2201      	movs	r2, #1
 8000d94:	408a      	lsls	r2, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <Update_EXTI+0x168>)
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6093      	str	r3, [r2, #8]
	}

	// 4-Set Call back Function
	GP_CallBack[EXTI_Config->EXTI_Pin.Line_Number] = EXTI_Config->P_CallBack;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <Update_EXTI+0x16c>)
 8000daa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// 5-enabling the interrupt request by writing a ‘1’ to
	//	 the corresponding bit in the interrupt mask register.
	if(EXTI_Config->IRQ_EN==Interrupt_Enable){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7b5b      	ldrb	r3, [r3, #13]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10b      	bne.n	8000dce <Update_EXTI+0x126>
		EXTI->EXTI_IMR |= (1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <Update_EXTI+0x168>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	408a      	lsls	r2, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <Update_EXTI+0x168>)
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e00b      	b.n	8000de6 <Update_EXTI+0x13e>
	}else{
		EXTI->EXTI_IMR &= ~(1<<EXTI_Config->EXTI_Pin.Line_Number);
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <Update_EXTI+0x168>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	408a      	lsls	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	4611      	mov	r1, r2
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <Update_EXTI+0x168>)
 8000de2:	400b      	ands	r3, r1
 8000de4:	6013      	str	r3, [r2, #0]
	}
	// 5-Enable NVIC
	if(EXTI_Config->IRQ_EN==Interrupt_Enable){
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7b5b      	ldrb	r3, [r3, #13]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d105      	bne.n	8000dfa <Update_EXTI+0x152>
		Enable_NVIC(EXTI_Config->EXTI_Pin.Line_Number);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fda6 	bl	8000944 <Enable_NVIC>
	}else{

		Disable_NVIC(EXTI_Config->EXTI_Pin.Line_Number);
	}
}
 8000df8:	e004      	b.n	8000e04 <Update_EXTI+0x15c>
		Disable_NVIC(EXTI_Config->EXTI_Pin.Line_Number);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fd3a 	bl	8000878 <Disable_NVIC>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010400 	.word	0x40010400
 8000e14:	20000020 	.word	0x20000020

08000e18 <main>:
#include "Keypad.h"
void Enable_Clock();
void EXTI9_CallBack(void);
uint32 IRQ_Flag=0;
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
	Enable_Clock();
 8000e1e:	f000 f827 	bl	8000e70 <Enable_Clock>
	LCD_init();
 8000e22:	f7ff f9c1 	bl	80001a8 <LCD_init>
	LCD_clear_screen();
 8000e26:	f7ff faad 	bl	8000384 <LCD_clear_screen>
	EXTI_Pin_Config_t EXTI_CFG;
	EXTI_CFG.EXTI_Pin=EXTI9PB9;
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <main+0x4c>)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.trigger = Rising;
 8000e34:	2301      	movs	r3, #1
 8000e36:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_CallBack=EXTI9_CallBack;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <main+0x50>)
 8000e3a:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN=Interrupt_Enable;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fe14 	bl	8000a70 <MCAL_EXTI_GPIO_Init>
	IRQ_Flag=1;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <main+0x54>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
	while(1){
		if(IRQ_Flag){
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <main+0x54>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0fb      	beq.n	8000e4e <main+0x36>
		LCD_clear_screen();
 8000e56:	f7ff fa95 	bl	8000384 <LCD_clear_screen>
		IRQ_Flag=0;
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <main+0x54>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag){
 8000e60:	e7f5      	b.n	8000e4e <main+0x36>
 8000e62:	bf00      	nop
 8000e64:	08000f7c 	.word	0x08000f7c
 8000e68:	08000ea5 	.word	0x08000ea5
 8000e6c:	2000001c 	.word	0x2000001c

08000e70 <Enable_Clock>:
		}
	}
}


void Enable_Clock(){
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_GPIOA();
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <Enable_Clock+0x30>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <Enable_Clock+0x30>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
	ENABLE_CLOCK_GPIOB();
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <Enable_Clock+0x30>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <Enable_Clock+0x30>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
	ENABLE_CLOCK_AFIO();
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <Enable_Clock+0x30>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <Enable_Clock+0x30>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <EXTI9_CallBack>:
void EXTI9_CallBack(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	IRQ_Flag=1;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <EXTI9_CallBack+0x1c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
	LCD_Send_String("IRQ EXTI9 IS HAPPEND _|- ");
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <EXTI9_CallBack+0x20>)
 8000eb0:	f7ff fb0a 	bl	80004c8 <LCD_Send_String>
	wait_ms(3000);
 8000eb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eb8:	f7ff f95a 	bl	8000170 <wait_ms>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000001c 	.word	0x2000001c
 8000ec4:	08000f88 	.word	0x08000f88

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ecc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	; (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef6:	f000 f811 	bl	8000f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff ff8d 	bl	8000e18 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f0c:	08000fac 	.word	0x08000fac
  ldr r2, =_sbss
 8000f10:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f14:	2000005c 	.word	0x2000005c

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <__libc_init_array>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	2500      	movs	r5, #0
 8000f20:	4e0c      	ldr	r6, [pc, #48]	; (8000f54 <__libc_init_array+0x38>)
 8000f22:	4c0d      	ldr	r4, [pc, #52]	; (8000f58 <__libc_init_array+0x3c>)
 8000f24:	1ba4      	subs	r4, r4, r6
 8000f26:	10a4      	asrs	r4, r4, #2
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	d109      	bne.n	8000f40 <__libc_init_array+0x24>
 8000f2c:	f000 f81a 	bl	8000f64 <_init>
 8000f30:	2500      	movs	r5, #0
 8000f32:	4e0a      	ldr	r6, [pc, #40]	; (8000f5c <__libc_init_array+0x40>)
 8000f34:	4c0a      	ldr	r4, [pc, #40]	; (8000f60 <__libc_init_array+0x44>)
 8000f36:	1ba4      	subs	r4, r4, r6
 8000f38:	10a4      	asrs	r4, r4, #2
 8000f3a:	42a5      	cmp	r5, r4
 8000f3c:	d105      	bne.n	8000f4a <__libc_init_array+0x2e>
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f44:	4798      	blx	r3
 8000f46:	3501      	adds	r5, #1
 8000f48:	e7ee      	b.n	8000f28 <__libc_init_array+0xc>
 8000f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4e:	4798      	blx	r3
 8000f50:	3501      	adds	r5, #1
 8000f52:	e7f2      	b.n	8000f3a <__libc_init_array+0x1e>
 8000f54:	08000fa4 	.word	0x08000fa4
 8000f58:	08000fa4 	.word	0x08000fa4
 8000f5c:	08000fa4 	.word	0x08000fa4
 8000f60:	08000fa8 	.word	0x08000fa8

08000f64 <_init>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	bf00      	nop
 8000f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6a:	bc08      	pop	{r3}
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	4770      	bx	lr

08000f70 <_fini>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	bf00      	nop
 8000f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f76:	bc08      	pop	{r3}
 8000f78:	469e      	mov	lr, r3
 8000f7a:	4770      	bx	lr
