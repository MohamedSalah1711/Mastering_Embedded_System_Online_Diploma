
Clock_initLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a4  080002ac  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a4  080002a4  000102ac  2**0
                  CONTENTS
  4 .ARM          00000000  080002a4  080002a4  000102ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a4  080002ac  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a8  080002a8  000102a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002ac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000079  00000000  00000000  000102d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000066  00000000  00000000  0001034e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000103b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000a83  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000000df  00000000  00000000  00010ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002d92  00000000  00000000  00010fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013d34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00013db0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800028c 	.word	0x0800028c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800028c 	.word	0x0800028c

08000170 <clock_init>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#define RCC_BASE 0x40021000
#define RCC_CR *((volatile unsigned int *)(RCC_BASE + 0x00))
#define RCC_CFGR *((volatile unsigned int *)(RCC_BASE + 0x04))
void clock_init (void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable HSI (HSION)
	RCC_CR |= (1<<0);
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <clock_init+0x6c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <clock_init+0x6c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
	/*PLLSRC: PLL entry clock source as HSI / 2 >>>> 4MHZ*/
	RCC_CFGR &=~ (1<<16) ;
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <clock_init+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a16      	ldr	r2, [pc, #88]	; (80001e0 <clock_init+0x70>)
 8000186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800018a:	6013      	str	r3, [r2, #0]
	/* PLLMUL: PLL multiplication factor * 8
	 * 0110: PLL input clock x 8
	 * SYS CLK 32MHZ
	 * */
	RCC_CFGR |= (6 << 18);
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <clock_init+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <clock_init+0x70>)
 8000192:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000196:	6013      	str	r3, [r2, #0]

	/* Bits 1:0
	 * SW: System clock switch
	 * 10: PLL selected as system clock
	 * */
	RCC_CFGR |= (2<<0);
 8000198:	4b11      	ldr	r3, [pc, #68]	; (80001e0 <clock_init+0x70>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a10      	ldr	r2, [pc, #64]	; (80001e0 <clock_init+0x70>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6013      	str	r3, [r2, #0]
	/*Bits 7:4 HPRE: AHB prescaler
	 * 0xxx: SYSCLK not divided
	 * AHB CLOCK 32MHZ
	 * */
	RCC_CFGR &=~ ( 1 << 7);
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <clock_init+0x70>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <clock_init+0x70>)
 80001aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001ae:	6013      	str	r3, [r2, #0]
	/* Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	 * 100: HCLK divided by 2
	 * */
	RCC_CFGR |= ( 0b100 << 8);
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <clock_init+0x70>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <clock_init+0x70>)
 80001b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ba:	6013      	str	r3, [r2, #0]

	/* Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	 * 101: HCLK divided by 4
	 * */
	RCC_CFGR |= ( 0b101 << 11);
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <clock_init+0x70>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <clock_init+0x70>)
 80001c2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001c6:	6013      	str	r3, [r2, #0]
	/* Bit 24 PLLON: PLL enable*/
	RCC_CR |= (1<<24);
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <clock_init+0x6c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <clock_init+0x6c>)
 80001ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40021004 	.word	0x40021004

080001e4 <main>:
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	clock_init();
 80001e8:	f7ff ffc2 	bl	8000170 <clock_init>
    /* Loop forever */
	for(;;);
 80001ec:	e7fe      	b.n	80001ec <main+0x8>
	...

080001f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f8:	480c      	ldr	r0, [pc, #48]	; (800022c <LoopForever+0x6>)
  ldr r1, =_edata
 80001fa:	490d      	ldr	r1, [pc, #52]	; (8000230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <LoopForever+0xe>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000200:	e002      	b.n	8000208 <LoopCopyDataInit>

08000202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000206:	3304      	adds	r3, #4

08000208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800020c:	d3f9      	bcc.n	8000202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020e:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000210:	4c0a      	ldr	r4, [pc, #40]	; (800023c <LoopForever+0x16>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000214:	e001      	b.n	800021a <LoopFillZerobss>

08000216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000218:	3204      	adds	r2, #4

0800021a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800021c:	d3fb      	bcc.n	8000216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021e:	f000 f811 	bl	8000244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000222:	f7ff ffdf 	bl	80001e4 <main>

08000226 <LoopForever>:

LoopForever:
    b LoopForever
 8000226:	e7fe      	b.n	8000226 <LoopForever>
  ldr   r0, =_estack
 8000228:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000230:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000234:	080002ac 	.word	0x080002ac
  ldr r2, =_sbss
 8000238:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800023c:	2000001c 	.word	0x2000001c

08000240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000240:	e7fe      	b.n	8000240 <ADC1_2_IRQHandler>
	...

08000244 <__libc_init_array>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2500      	movs	r5, #0
 8000248:	4e0c      	ldr	r6, [pc, #48]	; (800027c <__libc_init_array+0x38>)
 800024a:	4c0d      	ldr	r4, [pc, #52]	; (8000280 <__libc_init_array+0x3c>)
 800024c:	1ba4      	subs	r4, r4, r6
 800024e:	10a4      	asrs	r4, r4, #2
 8000250:	42a5      	cmp	r5, r4
 8000252:	d109      	bne.n	8000268 <__libc_init_array+0x24>
 8000254:	f000 f81a 	bl	800028c <_init>
 8000258:	2500      	movs	r5, #0
 800025a:	4e0a      	ldr	r6, [pc, #40]	; (8000284 <__libc_init_array+0x40>)
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <__libc_init_array+0x44>)
 800025e:	1ba4      	subs	r4, r4, r6
 8000260:	10a4      	asrs	r4, r4, #2
 8000262:	42a5      	cmp	r5, r4
 8000264:	d105      	bne.n	8000272 <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800026c:	4798      	blx	r3
 800026e:	3501      	adds	r5, #1
 8000270:	e7ee      	b.n	8000250 <__libc_init_array+0xc>
 8000272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000276:	4798      	blx	r3
 8000278:	3501      	adds	r5, #1
 800027a:	e7f2      	b.n	8000262 <__libc_init_array+0x1e>
 800027c:	080002a4 	.word	0x080002a4
 8000280:	080002a4 	.word	0x080002a4
 8000284:	080002a4 	.word	0x080002a4
 8000288:	080002a8 	.word	0x080002a8

0800028c <_init>:
 800028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028e:	bf00      	nop
 8000290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000292:	bc08      	pop	{r3}
 8000294:	469e      	mov	lr, r3
 8000296:	4770      	bx	lr

08000298 <_fini>:
 8000298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029a:	bf00      	nop
 800029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029e:	bc08      	pop	{r3}
 80002a0:	469e      	mov	lr, r3
 80002a2:	4770      	bx	lr
